== OVERVIEW

Все работает по примеру проекта BOINC.

Ученый создает проект и загружает скрипт с распределенным алгоритмом на сервер:
> ./grid.rb --create --name Pi@home --script example_scripts/pi.rb
> ./grid.rb --create --name Sort@home --script example_scripts/sort.rb --data example_scripts/array_data.txt

Клиент выбирает интересный ему проект:
> ./grid.rb --list

И подключается в качестве обработчика заданий:
> ./grid.rb --work Pi@home

Клиентский скрипт в цикле начинает отправлять на сервер запросы на получение части работы (chunk). После выполнения, результат работы отправляется на сервер; сервер сохраняет результат и выдает следующий chunk.

Каждую минуту отправляется запрос на сервер, уведомляющий, что клиент активен, на случай, если обработка данных занимает слишком много времени.

== Клиент

Примеры скриптов с задачами лежат в папке client/example_scripts:
- pi.rb - вычисление числа pi. На реальный алгоритм времени не было
- sort.rb - сортировка массива слиянием. Массив разбивается на подмассивы, подмассивы отдаются клиентам для сортировки. Далее полученные отсортированные подмассивы отдаются клиентам для слияния, пока не получится один массив.

В скрипте доступны методы:

_store - объект для доступа в базу для сохранения результатов
_data - объект для доступа к загруженным данным, например массив, который нужно отсортировать
_get_state - получить текущее состояние скрипта
_set_state - установить текущее состояние. Состояние идентифицирует отдельный шаг скрипта, для того, чтобы в случае, если сервер упадет, можно было продолжить выполнение, а не начинать с начала. Для скрипта pi.rb состояние - номер цифры после запятой, вычисляемой в данный момент
_emit - отправить работу одному из клиентов. Метод принимает
       * текущую позицию
       * данные которые нужно обработать
       * скрипт для обработки этих данных, который выполнится на клиенте (в виде строки)
       * коллбек, который выполнится, когда клиент обработает данные и пришлет результат.
_wait_for_all - подождать, пока все задачи, отправленные клиентам через _emit, будут выполнены
_finish - закончить выполнение скрипта

== Сервер

За распределение всех заданий на сервере отвечает класс Scheduler. Класс запускает в отдельном потоке клиентский скрипт; каждый вызов _emit кладет данные для клиента в очередь (Exchanger) и ждет, пока данные оттуда заберут.
Когда клиент запрашивает работу, вызывается метод schedule, который достает данные из очереди и отдает клиенту. Скрипт же делает следующую итерацию и кладет следующие данные в очередь для клиентов через _emit.

В скедулере в отдельном потоке проверяется активность клиентов. Если клиент слишком долго не объявлялся, данные, которые он обрабатывал отдадутся другому клиенту.

== 

Сервер задеплоить не успел.
Поднять локально:
прописать user/pass к mysql в db/database.yml
> bundle install
> rake db:reset
> ./bin/server
